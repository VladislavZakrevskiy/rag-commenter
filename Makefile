.PHONY: help dev build start stop restart logs clean setup migrate studio test lint format

COMPOSE_FILE = docker-compose.dev.yml
PROJECT_NAME = rag-tg-bot

GREEN = \033[0;32m
YELLOW = \033[1;33m
RED = \033[0;31m
NC = \033[0m

help: 
	@echo "$(GREEN)RAG Telegram Bot - –ö–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏$(NC)"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "$(YELLOW)%-20s$(NC) %s\n", $$1, $$2}'

setup: 
	@echo "$(GREEN)üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞...$(NC)"
	@if [ ! -f .env ]; then \
		cp env.example .env; \
		echo "$(YELLOW)üìù –°–æ–∑–¥–∞–Ω .env —Ñ–∞–π–ª. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ —Å –≤–∞—à–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏$(NC)"; \
	fi
	@mkdir -p scripts logs
	@chmod +x scripts/dev-start.sh
	@echo "$(GREEN)‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞$(NC)"

dev: setup 
	@echo "$(GREEN)üöÄ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(NC)"
	podman-compose -f $(COMPOSE_FILE) up --build

dev-detached: setup 
	@echo "$(GREEN)üöÄ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (—Ñ–æ–Ω–æ–≤—ã–π —Ä–µ–∂–∏–º)...$(NC)"
	podman-compose -f $(COMPOSE_FILE) up --build -d
	@echo "$(GREEN)‚úÖ –°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã –≤ —Ñ–æ–Ω–µ$(NC)"
	@echo "$(YELLOW)üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: http://localhost:3000$(NC)"
	@echo "$(YELLOW)üîç Prisma Studio: http://localhost:5555$(NC)"

build: 
	@echo "$(GREEN)üî® –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤...$(NC)"
	podman-compose -f $(COMPOSE_FILE) build

start: 
	@echo "$(GREEN)‚ñ∂Ô∏è  –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...$(NC)"
	podman-compose -f $(COMPOSE_FILE) start

stop: 
	@echo "$(YELLOW)‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...$(NC)"
	podman-compose -f $(COMPOSE_FILE) stop

restart: 
	@echo "$(YELLOW)üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...$(NC)"
	podman-compose -f $(COMPOSE_FILE) restart

down: 
	@echo "$(RED)üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...$(NC)"
	podman-compose -f $(COMPOSE_FILE) down

clean: 
	@echo "$(RED)üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞...$(NC)"
	podman-compose -f $(COMPOSE_FILE) down -v --rmi all
	podman system prune -f

logs: 
	@echo "$(GREEN)üìã –õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤:$(NC)"
	podman-compose -f $(COMPOSE_FILE) logs -f

logs-app: 
	@echo "$(GREEN)üìã –õ–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:$(NC)"
	podman-compose -f $(COMPOSE_FILE) logs -f app

logs-db: 
	@echo "$(GREEN)üìã –õ–æ–≥–∏ PostgreSQL:$(NC)"
	podman-compose -f $(COMPOSE_FILE) logs -f postgres

logs-redis: 
	@echo "$(GREEN)üìã –õ–æ–≥–∏ Redis:$(NC)"
	podman-compose -f $(COMPOSE_FILE) logs -f redis

shell: 
	@echo "$(GREEN)üêö –í—Ö–æ–¥ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...$(NC)"
	podman-compose -f $(COMPOSE_FILE) exec app sh

shell-db: 
	@echo "$(GREEN)üêö –í—Ö–æ–¥ –≤ PostgreSQL...$(NC)"
	podman-compose -f $(COMPOSE_FILE) exec postgres psql -U postgres -d rag_tg_bot

migrate: 
	@echo "$(GREEN)üóÑÔ∏è  –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...$(NC)"
	podman-compose -f $(COMPOSE_FILE) exec app npx prisma migrate deploy

migrate-dev: 
	@echo "$(GREEN)üóÑÔ∏è  –°–æ–∑–¥–∞–Ω–∏–µ dev –º–∏–≥—Ä–∞—Ü–∏–∏...$(NC)"
	podman-compose -f $(COMPOSE_FILE) exec app npx prisma migrate dev

generate: 
	@echo "$(GREEN)‚öôÔ∏è  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Prisma –∫–ª–∏–µ–Ω—Ç–∞...$(NC)"
	podman-compose -f $(COMPOSE_FILE) exec app npx prisma generate

studio: 
	@echo "$(GREEN)üîç Prisma Studio –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://localhost:5555$(NC)"
	@echo "$(YELLOW)–ï—Å–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: make dev-detached$(NC)"

reset-db: 
	@echo "$(RED)‚ö†Ô∏è  –°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...$(NC)"
	podman-compose -f $(COMPOSE_FILE) exec app npx prisma migrate reset --force

seed: 
	@echo "$(GREEN)üå± –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...$(NC)"
	podman-compose -f $(COMPOSE_FILE) exec app npm run seed

test: 
	@echo "$(GREEN)üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...$(NC)"
	podman-compose -f $(COMPOSE_FILE) exec app npm test

test-watch: 
	@echo "$(GREEN)üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ (watch —Ä–µ–∂–∏–º)...$(NC)"
	podman-compose -f $(COMPOSE_FILE) exec app npm run test:watch

test-e2e: 
	@echo "$(GREEN)üß™ –ó–∞–ø—É—Å–∫ e2e —Ç–µ—Å—Ç–æ–≤...$(NC)"
	podman-compose -f $(COMPOSE_FILE) exec app npm run test:e2e

lint: 
	@echo "$(GREEN)üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –ª–∏–Ω—Ç–µ—Ä–æ–º...$(NC)"
	podman-compose -f $(COMPOSE_FILE) exec app npm run lint

format: 
	@echo "$(GREEN)‚ú® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞...$(NC)"
	podman-compose -f $(COMPOSE_FILE) exec app npm run format

install: 
	@echo "$(GREEN)üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...$(NC)"
	podman-compose -f $(COMPOSE_FILE) exec app npm install

backup-db: 
	@echo "$(GREEN)üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...$(NC)"
	@mkdir -p backups
	podman-compose -f $(COMPOSE_FILE) exec postgres pg_dump -U postgres rag_tg_bot > backups/backup_$(shell date +%Y%m%d_%H%M%S).sql
	@echo "$(GREEN)‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω –≤ –ø–∞–ø–∫–µ backups/$(NC)"

restore-db: 
	@echo "$(YELLOW)üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ $(BACKUP)...$(NC)"
	@if [ -z "$(BACKUP)" ]; then \
		echo "$(RED)‚ùå –£–∫–∞–∂–∏—Ç–µ —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞: make restore-db BACKUP=backup_file.sql$(NC)"; \
		exit 1; \
	fi
	podman-compose -f $(COMPOSE_FILE) exec -T postgres psql -U postgres rag_tg_bot < backups/$(BACKUP)
	@echo "$(GREEN)‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞$(NC)"

status: 
	@echo "$(GREEN)üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:$(NC)"
	podman-compose -f $(COMPOSE_FILE) ps

health: 
	@echo "$(GREEN)üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤:$(NC)"
	@echo "$(YELLOW)–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:$(NC)"
	@curl -s http://localhost:3000 > /dev/null && echo "$(GREEN)‚úÖ OK$(NC)" || echo "$(RED)‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ$(NC)"
	@echo "$(YELLOW)Prisma Studio:$(NC)"
	@curl -s http://localhost:5555 > /dev/null && echo "$(GREEN)‚úÖ OK$(NC)" || echo "$(RED)‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ$(NC)"


up: dev 
d: dev-detached 
s: stop 
r: restart 
l: logs 
c: clean 
